## Makefile learning
### Makefile overview
* makefile关系到整个工程的编译规则，完成后只需make命令即可实现“自己主动化编译”。
### Makefile规则
target ...:prerequisites ...
    command
    ...
target：是目标文件，可以是Object file,也可以是执行文件，还可以是一个标签（Lable）。
prerequisites：是要生成那个target所需要的文件或目标。
command：是make需要执行的命令（任意的Shell命令）。
这是一个文件的依赖关系，也就是说，target这一个或多个的目标文件依赖于prerequisites中的文件，其生成规则定义在command中。
prerequisites中如果有一个以上的文件比target文件要新的话，command所定义的命令就会执行。这就是Makefile中最核心的内容。

示例：
  edit : main.o kbd.o command.o display.o \
          insert.o search.o files.o utils.o\
           cc -o edit main.o kbd.o command.o display.o \
                      insert.o search.o files.o utils.o
 
   main.o : main.c defs.h
           cc -c main.c
   kbd.o : kbd.c defs.h command.h
           cc -c kbd.c
   command.o : command.c defs.h command.h
           cc -c command.c
   display.o : display.c defs.h buffer.h
           cc -c display.c
   insert.o : insert.c defs.h buffer.h
           cc -c insert.c
   search.o : search.c defs.h buffer.h
           cc -c search.c
   files.o : files.c defs.h buffer.h command.h
           cc -c files.c
   utils.o : utils.c defs.h
           cc -c utils.c
   clean :
           rm edit main.o kbd.o command.o display.o \
              insert.o search.o files.o utils.o 
command一定要以一个Tab键作为开头。
make不管命令是怎么工作的，它只管执行所定义的命令。make会比较targets文件和prerequisites文件的修改日期，
如果prerequisites文件的日期要比targets文件日期要新，或者target不存在的话，那么，make就会执行后续定义的的命令。

另外，clean不是一个文件，它只不过是一个动作的名字，冒号后面什么都没有，make也不会自动去找文件的依赖性，
也就不会自动执行其后所定义的命令。要执行其后命令，就要在make命令后明显的指出这个lable的名字“make clean”。

### make是如何工作的
默认方式下，只输入make命令。那么，
1. make会在当前目录下找名字叫“Makefile”或者“makefile”的文件。
2. 如果找到，它会找文件中的第一个目标文件（target），在上面例子中就是“edit”文件，并把这个文件作为最终的目标文件。
3. 如果edit文件不存在，或是edit所依赖的.o文件修改时间比edit这个文件新，那么就会执行后面的命令生成edit这个文件。
4. 如果edit所依赖的.o文件也存在，那么make会在当前文件中找目标为.o文件的依赖性，如果找到则再根据那一个规则生成.o文件
  修改时间比edit这个文件新，那么就会执行后面的命令生成edit这个文件。
5. 当然c文件和H文件应该存在的，于是make生成.o文件，然后再用.o文件声明make的终极任务，也就是执行文件edit。

像clean这种，没有被第一个目标文件直接或者间接关联，那么它后面的命令将不会被自动执行，使用make clean。

### makefile中使用变量
objects = main.o kbd.o command.o display.o \
          insert.o search.o files.o utils.o\
           cc -o edit main.o kbd.o command.o display.o \
                      insert.o search.o files.o utils.o
edit: $(objects)
        cc -o edit $(objects)
### 让make自动推导
make很强大，它可以自动推导文件以及文件依赖关系后面的命令
只要make看到一个.o文件，它会自动的把.c文件加载依赖关系中，并且cc -c xx.c也会被推导出来，于是，
objects = main.o kbd.o command.o display.o \
             insert.o search.o files.o utils.o
 
edit : $(objects)
        cc -o edit $(objects)

main.o : defs.h
kbd.o : defs.h command.h
command.o : defs.h command.h
display.o : defs.h buffer.h
insert.o : defs.h buffer.h
search.o : defs.h buffer.h
files.o : defs.h buffer.h command.h
utils.o : defs.h

.PHONY : clean
clean :
        rm edit $(objects)
这种方法，也就是make的“隐晦规则”。上面文件中，“.PHONY”表示，clean是个伪目标文件。

### 另类风格的makefile
objects = main.o kbd.o command.o display.o \
             insert.o search.o files.o utils.o
 
edit : $(objects)
        cc -o edit $(objects)

$(objects) : defs.h
kbd.o command.o files.o : command.h
display.o insert.o search.o files.o : buffer.h

.PHONY : clean
clean :
        rm edit $(objects)

### 清空目标文件的规则
.PHONY : clean
clean :
        -rm edit $(objects)
rm命令前面加个减号意思是，也许某些文件出现问题，但不要管，继续做后面的事。
当然，clean的规则不要放在文件开头，不然会变成make的默认目标，clean从来都是应该放在文件的最后。

## Makefile总述
### makefile主要包含了显示规则，隐晦规则，变量定义，文件指示和注释。
1. 显示规则：是明确指出的命令
2. 隐晦规则：简写makefile，make自动推导的命令
3. 变量定义：makefile中可以定义变量，像C语言的宏，当makefile被执行时，其中的变量都会被扩展到相应的引用位置。
4. 文件指示：包含3个部分，一是在一个makefile中引用另一个makefile，像C语言的include一样；
   二是根据某些情况指定makefile中的有效部分，像C语言的#if一样；
   三是定义一个多行的命令。
5. 注释：makefile中只有行注释，和shell脚本一样使用“#”字符，如果要在makefile中使用#字符，可以使用反斜杠转义，如“\#”。

### makefile文件名
大多数的make都支持makefile和Makefile这两种默认文件名。
当然可以使用其他文件名来写makefile，如Make.Linux等 make -f Make.Linux或者make --file Make.Linux。

### 引用其他的makefile
include<filename> filename可以是当前操作系统SHELL的文件模式（可以包含路径和通配符）
在include前面可以有一些空字符，但绝不能是Tab键开始，include和filename之间可以用一个或多个空字符
如makefile：a.mk b.mk c.mk  foo.make  变量$(bar)包含了e.mk f.mk，则
include foo.make *.mk $(bar) 等价于
include foo.make a.mk b.mk c.mk e.mk f.mk
make命令开始时，会找include指出的makefile，并把其内容放在当前位置。
如果文件没有指定绝对路径或者相对路径的话，make会在当前目录下首先寻找，如果没有找到，会在下面几个目录查找：
1. 如果make执行时，有“-I”或“--include-dir”参数，那么make就会在这个参数所指定的目录下去寻找。
2. 如果目录/include（一般是：/usr/local/bin或/usr/include）存在的话，make也会去找。
如果有文件没有找到的话，make会生成一条警告信息，但不会马上出现致命错误。它会继续载入其它的文件，一旦完成makefile的读取，
make会再重试这些没有找到，或是不能读取的文件，如果还是不行，make才会出现一条致命信息。如果你想让make不理那些无法读取的
文件，而继续执行，你可以在include前加一个减号“-”。如：
-include<filename>
其表示，无论include过程中出现什么错误，都不要报错继续执行。和其它版本make兼容的相关命令是sinclude，其作用和这个一样。

## 环境变量MAKEFILES
如果你的当前环境中定义了环境变量MAKEFILES，那么，make会把这个变量中的值做一个类似于include的动作。这个变量中的值是
其它的Makefile，用空格分隔。只是，它和include不同的是，从这个环境变中引入的Makefile的“目标”不会起作用，如果环境变量
中定义的文件发现错误，make也会不理。

### make的工作方式
1.        读入所有的Makefile。
2.        读入被include的其它Makefile。
3.        初始化文件中的变量。
4.        推导隐晦规则，并分析所有规则。
5.        为所有的目标文件创建依赖关系链。
6.        根据依赖关系，决定哪些目标要重新生成。
7.        执行生成命令。
make并不会完全马上展开，make使用的是拖延战术，如果变量出现在依赖关系规则中，那么仅当这条依赖被决定要使用了，变量才会在其
内部展开。
### 在规则中使用通配符
“~”：当前用户的“$HOME”目录
“*”：代替一系列文件，如“*.c”表示所有后缀为C的文件。如文件名中有通配符则使用转义字符“\”，如“\*”
objects = *.o objects的值就是“*.o”,不是所有.o文件的集合（objects := $(wildcard *.o)）

### 文件搜寻

方法一：使用特殊变量VPATH，多个目录以冒号“:”分隔
        VPATH = src:../headers 指定两个目录src和../headers, make会按照当前目录，src ../headers顺序搜索
        当前目录永远是最高优先搜索的地方
方法二：使用make关键字“vpath”(全小写)
1.        vpath < pattern> < directories>    为符合模式< pattern>的文件指定搜索目录<directories>。
2.        vpath < pattern>                   清除符合模式< pattern>的文件的搜索目录。
3.        vpath                              清除所有已被设置好了的文件搜索目录。
如：vpath %.c foo
    vpath % blish
    vpath %.c bar
    make按照语句的先后顺序来执行搜索。.c文件查找顺序：foo -> blish -> bar
    vpath %.c foo:bar
    vpath % blish
    .c文件查找顺序：foo -> bar -> blish

### 伪目标
伪目标不是一个文件，只是一个标签，伪目标不能和文件名重名，否则就失去了伪目标的意义了。
避免文件重名这种情况，使用.PHONY: clean 只要有这个声明，不管是否有clean文件，要运行clean,只有make clean

伪目标一般没有依赖的文件。但是，也可以为伪目标指定所依赖的文件。伪目标同样可以作为默认目标，只要将其放在第一个。
示例，如果你的makefile要生成多个可执行文件，则，
all : prog1 prog2 prog3
.PHONY : all
 
prog1 : prog1.o utils.o
        cc -o prog1 prog1.o utils.o

prog2 : prog2.o
        cc -o prog2 prog2.o

prog3 : prog3.o sort.o utils.o
        cc -o prog3 prog3.o sort.o utils.o
由于伪目标的特性是，总是被执行，所以其依赖的那三个目标就总是不如“all”这个目标新，总是被决议。

另外，目标可以成为依赖，那伪目标也可以成为依赖，例子：
.PHONY: cleanall cleanobj cleandiff
cleanall : cleanobj cleandiff
        rm program
cleanobj :
        rm *.o
cleandiff :
        rm *.diff

### 多目标
 bigoutput littleoutput : text.g
           generate text.g -$(subst output,,$@) > $@
等价于：
bigoutput : text.g
           generate text.g -big > bigoutput
   littleoutput : text.g
           generate text.g -little > littleoutput
其中，-$(subst output,,$@)中的“$”表示执行一个Makefile的函数，函数名为subst，后面的为参数。
关于函数，将在后面讲述。这里的这个函数是截取字符串的意思，“$@”表示目标的集合，就像一个数组，“$@”依次取出目标，并执于命令。

### 静态模式
静态模式可以更加容易地定义多目标的规则，可以让我们的规则变得更加的有弹性和灵活。我们还是先来看一下语法：
<targets...>: <target-pattern>: <prereq-patterns ...>
　　　<commands>
...
targets定义了一系列的目标文件，可以有通配符。是目标的一个集合。
target-parrtern是指明了targets的模式，也就是的目标集模式。
prereq-parrterns是目标的依赖模式，它对target-parrtern形成的模式再进行一次依赖目标的定义。

如果我们的<target-parrtern>定义成“%.o”，意思是我们的集合中都是以“.o”结尾的，而如果我们的<prereq-parrterns>定义成“%.c”，意思是对<target-parrtern>所形成的目标集进行二次定义，
其计算方法是，取<target-parrtern>模式中的“%”（也就是去掉了[.o]这个结尾），并为其加上[.c]这个结尾，形成的新集合。
所以，我们的“目标模式”或是“依赖模式”中都应该有“%”这个字符，如果你的文件名中有“%”那么你可以使用反斜杠“\”进行转义，来标明真实的“%”字符。

示例：
objects = foo.o bar.o
 
   all: $(objects)
 
   $(objects): %.o: %.c
           $(CC) -c $(CFLAGS) $< -o $@
 
上面的例子中，指明了我们的目标从$object中获取，“%.o”表明要所有以“.o”结尾的目标，也就是“foo.o bar.o”，也就是变量$object集合的模式，而依赖模式“%.c”则取模式“%.o”的“%”，也就是“foobar”，
并为其加下“.c”的后缀，于是，我们的依赖目标就是“foo.cbar.c”。而命令中的“$<”和“$@”则是自动化变量，“$<”表示所有的依赖目标集（也就是“foo.cbar.c”），“$@”表示目标集（也就是foo.o bar.o”）。

 静态模式规则，是很灵活，很强大的功能，例如：
  files = foo.elc bar.o lose.o
 
   $(filter %.o,$(files)): %.o: %.c
           $(CC) -c $(CFLAGS) $< -o $@
   $(filter %.elc,$(files)): %.elc: %.el
           emacs -f batch-byte-compile $<
$(filter%.o,$(files))表示调用Makefile的filter函数，过滤“$filter”集，只要其中模式为“%.o”的内容。这个例字展示了Makefile中更大的弹性。

### 自动生成依赖性
大多数c/c++编译器都支持一个“-M”选项，即自动找寻源文件中包含的头文件，并生成一个依赖关系。
例如命令：
cc -M main.c 其输出是：
main.o : main.c defs.h
注意，如果使用的是GNU的c/c++编译器，需要使用“-MM”，“-M”选项会把标准库的头文件也包含进来。

GNU组织建议把编译器为每一个源文件的自动生成的依赖关系放到一个文件中，为每一个“name.c”的文件都生成一个“name.d”的Makefile文件，[.d]文件中就存放对应[.c]文件的依赖关系。
这里，我们给出了一个模式规则来产生[.d]文件：
   %.d: %.c
           @set -e; rm -f $@; \
            $(CC) -M $(CPPFLAGS) $< > $@.; \
            sed 's,\.o[ :]*,\1.o $@ : ,g' < $@. > $@;\
            rm -f $@.
这个规则的意思是，所有的[.d]文件依赖于[.c]文件，“rm-f $@”的意思是删除所有的目标，也就是[.d]文件，第二行的意思是，为每个依赖文件“$<”，也就是[.c]文件生成依赖文件，
“$@”表示模式“%.d”文件，如果有一个C文件是name.c，那么“%”就是“name”，“”意为一个随机编号，第二行生成的文件有可能是“name.d.12345”，第三行使用sed命令做了一个替换，
关于sed命令的用法请参看相关的使用文档。第四行就是删除临时文件。
总而言之，这个模式要做的事就是在编译器生成的依赖关系中加入[.d]文件的依赖，即把依赖关系：
   main.o : main.c defs.h
转成：
   main.o main.d : main.c defs.h
于是，我们的[.d]文件也会自动更新了，并会自动生成了，当然，你还可以在这个[.d]文件中加入的不只是依赖关系，包括生成的命令也可一并加入，让每个[.d]文件都包含一个完赖的规则。
一旦我们完成这个工作，接下来，我们就要把这些自动生成的规则放进我们的主Makefile中。我们可以使用Makefile的“include”命令，来引入别的Makefile文件（前面讲过），例如：
   sources = foo.c bar.c
   include $(sources:.c=.d)
上述语句中的“$(sources:.c=.d)”中的“.c=.d”的意思是做一个替换，把变量$(sources)所有[.c]的字串都替换成[.d]，关于这个“替换”的内容，在后面我会有更为详细的讲述。当然，你得注意次序，
因为include是按次来载入文件，最先载入的[.d]文件中的目标会成为默认目标。

## makefile书写命令
### 显示命令
@echo ...：只输出结果，不显示命令
make加参数“-n”或者“--just-pirnt” : 只显示命令，但不会执行命令。这个命令有利于调试makefile，查看命令执行是什么顺序等。
make加参数“-s”或者“--slient”则是全面禁止命令的显示。

### 命令执行
需要注意的是，如果你要让上一条命令的结果应用在下一条命令时，你应该使用分号分隔这两条命令。
例1：
exec:
        cd /home/root
        pwd
例2：
exec:
        cd /home/root;pwd
当我们执行“make exec”时，第一个例子中的cd没有作用，pwd会打印出当前的Makefile目录，而第二个例子中，cd就起作用了，pwd会打印出“/home/root。

### 命令出错
我们可以在Makefile的命令行前加一个减号“-”（在Tab键之后），标记为不管命令出不出错都认为是成功的。如：
  clean:
           -rm -f *.o
还有一个全局的办法是，给make加上“-i”或是“--ignore-errors”参数，那么，Makefile中所有命令都会忽略错误。而如果一个规则是以“.IGNORE”作为目标的，那么这个规则中的所有命令将会忽略错误。
这些是不同级别的防止命令出错的方法，你可以根据你的不同喜欢设置。
还有一个要提一下的make的参数的是“-k”或是“--keep-going”，这个参数的意思是，如果某规则中的命令出错了，那么就终目该规则的执行，但继续执行其它规则。

### 嵌套执行make
总控makefile如下：
subsystem:
           cd subdir && $(MAKE)
其等价于：
    subsystem:
           $(MAKE) -C subdir
总控Makefile的变量可以传递到下级的Makefile中（如果你显示的声明），但是不会覆盖下层的Makefile中所定义的变量，除非指定了“-e”参数。
如果你要传递变量到下级Makefile中，那么你可以使用这样的声明：
export<variable ...>
如果你不想让某些变量传递到下级Makefile中，那么你可以这样声明：
unexport<variable ...>

例子：
export variable =(:=或者+=) value 等价于：
variable =(:=或者+=) value
export variable
如果你要传递所有的变量，那么，只要一个export就行了。后面什么也不用跟，表示传递所有的变量。

需要注意的是，有两个变量，一个是SHELL，一个是MAKEFLAGS，这两个变量不管你是否export，其总是要传递到下层Makefile中，特别是MAKEFILES变量，其中包含了make的参数信息，
如果我们执行“总控Makefile”时有make参数或是在上层Makefile中定义了这个变量，那么MAKEFILES变量将会是这些参数，并会传递到下层Makefile中，这是一个系统级的环境变量。
使用“make -w”来执行，那么当进入该目录时，我们会看到：
      make: Entering directory `/home/root/gnu/make'.
而在完成下层make后离开目录时，我们会看到：   
   make: Leaving directory `/home/root/gnu/make'

当你使用“-C”参数来指定make下层Makefile时，“-w”会被自动打开的。如果参数中有“-s”（“--slient”）或是“--no-print-directory”，那么，“-w”总是失效的。

### 定义命令包
定义这种命令序列的语法以“define”开始，以“endef”结束，如：
define run-yacc
yacc $(firstword $^)
mv y.tab.c $@
endef

 foo.c : foo.y
           $(run-yacc)
在这个命令包的使用中，命令包“run-yacc”中的“$^”就是“foo.y”，“$@”就是“foo.c”


## 使用变量
### 变量的基础