## Makefile learning
### Makefile overview
* makefile关系到整个工程的编译规则，完成后只需make命令即可实现“自己主动化编译”。
### Makefile规则
target ...:prerequisites ...
    command
    ...
target：是目标文件，可以是Object file,也可以是执行文件，还可以是一个标签（Lable）。
prerequisites：是要生成那个target所需要的文件或目标。
command：是make需要执行的命令（任意的Shell命令）。
这是一个文件的依赖关系，也就是说，target这一个或多个的目标文件依赖于prerequisites中的文件，其生成规则定义在command中。
prerequisites中如果有一个以上的文件比target文件要新的话，command所定义的命令就会执行。这就是Makefile中最核心的内容。

示例：
  edit : main.o kbd.o command.o display.o \
          insert.o search.o files.o utils.o\
           cc -o edit main.o kbd.o command.o display.o \
                      insert.o search.o files.o utils.o
 
   main.o : main.c defs.h
           cc -c main.c
   kbd.o : kbd.c defs.h command.h
           cc -c kbd.c
   command.o : command.c defs.h command.h
           cc -c command.c
   display.o : display.c defs.h buffer.h
           cc -c display.c
   insert.o : insert.c defs.h buffer.h
           cc -c insert.c
   search.o : search.c defs.h buffer.h
           cc -c search.c
   files.o : files.c defs.h buffer.h command.h
           cc -c files.c
   utils.o : utils.c defs.h
           cc -c utils.c
   clean :
           rm edit main.o kbd.o command.o display.o \
              insert.o search.o files.o utils.o 
command一定要以一个Tab键作为开头。
make不管命令是怎么工作的，它只管执行所定义的命令。make会比较targets文件和prerequisites文件的修改日期，
如果prerequisites文件的日期要比targets文件日期要新，或者target不存在的话，那么，make就会执行后续定义的的命令。

另外，clean不是一个文件，它只不过是一个动作的名字，冒号后面什么都没有，make也不会自动去找文件的依赖性，
也就不会自动执行其后所定义的命令。要执行其后命令，就要在make命令后明显的指出这个lable的名字“make clean”。

### make是如何工作的
默认方式下，只输入make命令。那么，
1. make会在当前目录下找名字叫“Makefile”或者“makefile”的文件。
2. 如果找到，它会找文件中的第一个目标文件（target），在上面例子中就是“edit”文件，并把这个文件作为最终的目标文件。
3. 如果edit文件不存在，或是edit所依赖的.o文件修改时间比edit这个文件新，那么就会执行后面的命令生成edit这个文件。
4. 如果edit所依赖的.o文件也存在，那么make会在当前文件中找目标为.o文件的依赖性，如果找到则再根据那一个规则生成.o文件
  修改时间比edit这个文件新，那么就会执行后面的命令生成edit这个文件。
5. 当然c文件和H文件应该存在的，于是make生成.o文件，然后再用.o文件声明make的终极任务，也就是执行文件edit。

像clean这种，没有被第一个目标文件直接或者间接关联，那么它后面的命令将不会被自动执行，使用make clean。

### makefile中使用变量
objects = main.o kbd.o command.o display.o \
          insert.o search.o files.o utils.o\
           cc -o edit main.o kbd.o command.o display.o \
                      insert.o search.o files.o utils.o
edit: $(objects)
        cc -o edit $(objects)
### 让make自动推导
make很强大，它可以自动推导文件以及文件依赖关系后面的命令
只要make看到一个.o文件，它会自动的把.c文件加载依赖关系中，并且cc -c xx.c也会被推导出来，于是，
objects = main.o kbd.o command.o display.o \
             insert.o search.o files.o utils.o
 
edit : $(objects)
        cc -o edit $(objects)

main.o : defs.h
kbd.o : defs.h command.h
command.o : defs.h command.h
display.o : defs.h buffer.h
insert.o : defs.h buffer.h
search.o : defs.h buffer.h
files.o : defs.h buffer.h command.h
utils.o : defs.h

.PHONY : clean
clean :
        rm edit $(objects)
这种方法，也就是make的“隐晦规则”。上面文件中，“.PHONY”表示，clean是个伪目标文件。

### 另类风格的makefile
objects = main.o kbd.o command.o display.o \
             insert.o search.o files.o utils.o
 
edit : $(objects)
        cc -o edit $(objects)

$(objects) : defs.h
kbd.o command.o files.o : command.h
display.o insert.o search.o files.o : buffer.h

.PHONY : clean
clean :
        rm edit $(objects)

### 清空目标文件的规则
.PHONY : clean
clean :
        -rm edit $(objects)
rm命令前面加个减号意思是，也许某些文件出现问题，但不要管，继续做后面的事。
当然，clean的规则不要放在文件开头，不然会变成make的默认目标，clean从来都是应该放在文件的最后。

## Makefile总述
### makefile主要包含了显示规则，隐晦规则，变量定义，文件指示和注释。
1. 显示规则：是明确指出的命令
2. 隐晦规则：简写makefile，make自动推导的命令
3. 变量定义：makefile中可以定义变量，像C语言的宏，当makefile被执行时，其中的变量都会被扩展到相应的引用位置。
4. 文件指示：包含3个部分，一是在一个makefile中引用另一个makefile，像C语言的include一样；
   二是根据某些情况指定makefile中的有效部分，像C语言的#if一样；
   三是定义一个多行的命令。
5. 注释：makefile中只有行注释，和shell脚本一样使用“#”字符，如果要在makefile中使用#字符，可以使用反斜杠转义，如“\#”。

### makefile文件名
大多数的make都支持makefile和Makefile这两种默认文件名。
当然可以使用其他文件名来写makefile，如Make.Linux等 make -f Make.Linux或者make --file Make.Linux。

### 引用其他的makefile
include<filename> filename可以是当前操作系统SHELL的文件模式（可以包含路径和通配符）
在include前面可以有一些空字符，但绝不能是Tab键开始，include和filename之间可以用一个或多个空字符
如makefile：a.mk b.mk c.mk  foo.make  变量$(bar)包含了e.mk f.mk，则
include foo.make *.mk $(bar) 等价于
include foo.make a.mk b.mk c.mk e.mk f.mk
make命令开始时，会找include指出的makefile，并把其内容放在当前位置。
如果文件没有指定绝对路径或者相对路径的话，make会在当前目录下首先寻找，如果没有找到，会在下面几个目录查找：
1. 如果make执行时，有“-I”或“--include-dir”参数，那么make就会在这个参数所指定的目录下去寻找。
2. 如果目录/include（一般是：/usr/local/bin或/usr/include）存在的话，make也会去找。
如果有文件没有找到的话，make会生成一条警告信息，但不会马上出现致命错误。它会继续载入其它的文件，一旦完成makefile的读取，
make会再重试这些没有找到，或是不能读取的文件，如果还是不行，make才会出现一条致命信息。如果你想让make不理那些无法读取的
文件，而继续执行，你可以在include前加一个减号“-”。如：
-include<filename>
其表示，无论include过程中出现什么错误，都不要报错继续执行。和其它版本make兼容的相关命令是sinclude，其作用和这个一样。

## 环境变量MAKEFILES
如果你的当前环境中定义了环境变量MAKEFILES，那么，make会把这个变量中的值做一个类似于include的动作。这个变量中的值是
其它的Makefile，用空格分隔。只是，它和include不同的是，从这个环境变中引入的Makefile的“目标”不会起作用，如果环境变量
中定义的文件发现错误，make也会不理。

### make的工作方式
1.        读入所有的Makefile。
2.        读入被include的其它Makefile。
3.        初始化文件中的变量。
4.        推导隐晦规则，并分析所有规则。
5.        为所有的目标文件创建依赖关系链。
6.        根据依赖关系，决定哪些目标要重新生成。
7.        执行生成命令。
make并不会完全马上展开，make使用的是拖延战术，如果变量出现在依赖关系规则中，那么仅当这条依赖被决定要使用了，变量才会在其
内部展开。
### 在规则中使用通配符
“~”：当前用户的“$HOME”目录
“*”：代替一系列文件，如“*.c”表示所有后缀为C的文件。如文件名中有通配符则使用转义字符“\”，如“\*”
objects = *.o objects的值就是“*.o”,不是所有.o文件的集合（objects := $(wildcard *.o)）

### 文件搜寻

方法一：使用特殊变量VPATH，多个目录以冒号“:”分隔
        VPATH = src:../headers 指定两个目录src和../headers, make会按照当前目录，src ../headers顺序搜索
        当前目录永远是最高优先搜索的地方
方法二：使用make关键字“vpath”(全小写)
1.        vpath < pattern> < directories>    为符合模式< pattern>的文件指定搜索目录<directories>。
2.        vpath < pattern>                   清除符合模式< pattern>的文件的搜索目录。
3.        vpath                              清除所有已被设置好了的文件搜索目录。
如：vpath %.c foo
    vpath % blish
    vpath %.c bar
    make按照语句的先后顺序来执行搜索。.c文件查找顺序：foo -> blish -> bar
    vpath %.c foo:bar
    vpath % blish
    .c文件查找顺序：foo -> bar -> blish

### 伪目标
伪目标不是一个文件，只是一个标签，伪目标不能和文件名重名，否则就失去了伪目标的意义了。
避免文件重名这种情况，使用.PHONY: clean 只要有这个声明，不管是否有clean文件，要运行clean,只有make clean

伪目标一般没有依赖的文件。但是，也可以为伪目标指定所依赖的文件。伪目标同样可以作为默认目标，只要将其放在第一个。
示例，如果你的makefile要生成多个可执行文件，则，
all : prog1 prog2 prog3
.PHONY : all
 
prog1 : prog1.o utils.o
        cc -o prog1 prog1.o utils.o

prog2 : prog2.o
        cc -o prog2 prog2.o

prog3 : prog3.o sort.o utils.o
        cc -o prog3 prog3.o sort.o utils.o
由于伪目标的特性是，总是被执行，所以其依赖的那三个目标就总是不如“all”这个目标新，总是被决议。

另外，目标可以成为依赖，那伪目标也可以成为依赖，例子：
.PHONY: cleanall cleanobj cleandiff
cleanall : cleanobj cleandiff
        rm program
cleanobj :
        rm *.o
cleandiff :
        rm *.diff

### 多目标
 bigoutput littleoutput : text.g
           generate text.g -$(subst output,,$@) > $@
等价于：
bigoutput : text.g
           generate text.g -big > bigoutput
   littleoutput : text.g
           generate text.g -little > littleoutput
其中，-$(subst output,,$@)中的“$”表示执行一个Makefile的函数，函数名为subst，后面的为参数。
关于函数，将在后面讲述。这里的这个函数是截取字符串的意思，“$@”表示目标的集合，就像一个数组，“$@”依次取出目标，并执于命令。

### 静态模式
静态模式可以更加容易地定义多目标的规则，可以让我们的规则变得更加的有弹性和灵活。我们还是先来看一下语法：
<targets...>: <target-pattern>: <prereq-patterns ...>
　　　<commands>
...
targets定义了一系列的目标文件，可以有通配符。是目标的一个集合。
target-parrtern是指明了targets的模式，也就是的目标集模式。
prereq-parrterns是目标的依赖模式，它对target-parrtern形成的模式再进行一次依赖目标的定义。

如果我们的<target-parrtern>定义成“%.o”，意思是我们的集合中都是以“.o”结尾的，而如果我们的<prereq-parrterns>定义成“%.c”，意思是对<target-parrtern>所形成的目标集进行二次定义，
其计算方法是，取<target-parrtern>模式中的“%”（也就是去掉了[.o]这个结尾），并为其加上[.c]这个结尾，形成的新集合。
所以，我们的“目标模式”或是“依赖模式”中都应该有“%”这个字符，如果你的文件名中有“%”那么你可以使用反斜杠“\”进行转义，来标明真实的“%”字符。

示例：
objects = foo.o bar.o
 
   all: $(objects)
 
   $(objects): %.o: %.c
           $(CC) -c $(CFLAGS) $< -o $@
 
上面的例子中，指明了我们的目标从$object中获取，“%.o”表明要所有以“.o”结尾的目标，也就是“foo.o bar.o”，也就是变量$object集合的模式，而依赖模式“%.c”则取模式“%.o”的“%”，也就是“foobar”，
并为其加下“.c”的后缀，于是，我们的依赖目标就是“foo.cbar.c”。而命令中的“$<”和“$@”则是自动化变量，“$<”表示所有的依赖目标集（也就是“foo.cbar.c”），“$@”表示目标集（也就是foo.o bar.o”）。

 静态模式规则，是很灵活，很强大的功能，例如：
  files = foo.elc bar.o lose.o
 
   $(filter %.o,$(files)): %.o: %.c
           $(CC) -c $(CFLAGS) $< -o $@
   $(filter %.elc,$(files)): %.elc: %.el
           emacs -f batch-byte-compile $<
$(filter%.o,$(files))表示调用Makefile的filter函数，过滤“$filter”集，只要其中模式为“%.o”的内容。这个例字展示了Makefile中更大的弹性。

### 自动生成依赖性
大多数c/c++编译器都支持一个“-M”选项，即自动找寻源文件中包含的头文件，并生成一个依赖关系。
例如命令：
cc -M main.c 其输出是：
main.o : main.c defs.h
注意，如果使用的是GNU的c/c++编译器，需要使用“-MM”，“-M”选项会把标准库的头文件也包含进来。

GNU组织建议把编译器为每一个源文件的自动生成的依赖关系放到一个文件中，为每一个“name.c”的文件都生成一个“name.d”的Makefile文件，[.d]文件中就存放对应[.c]文件的依赖关系。
这里，我们给出了一个模式规则来产生[.d]文件：
   %.d: %.c
           @set -e; rm -f $@; \
            $(CC) -M $(CPPFLAGS) $< > $@.; \
            sed 's,\.o[ :]*,\1.o $@ : ,g' < $@. > $@;\
            rm -f $@.
这个规则的意思是，所有的[.d]文件依赖于[.c]文件，“rm-f $@”的意思是删除所有的目标，也就是[.d]文件，第二行的意思是，为每个依赖文件“$<”，也就是[.c]文件生成依赖文件，
“$@”表示模式“%.d”文件，如果有一个C文件是name.c，那么“%”就是“name”，“”意为一个随机编号，第二行生成的文件有可能是“name.d.12345”，第三行使用sed命令做了一个替换，
关于sed命令的用法请参看相关的使用文档。第四行就是删除临时文件。
总而言之，这个模式要做的事就是在编译器生成的依赖关系中加入[.d]文件的依赖，即把依赖关系：
   main.o : main.c defs.h
转成：
   main.o main.d : main.c defs.h
于是，我们的[.d]文件也会自动更新了，并会自动生成了，当然，你还可以在这个[.d]文件中加入的不只是依赖关系，包括生成的命令也可一并加入，让每个[.d]文件都包含一个完赖的规则。
一旦我们完成这个工作，接下来，我们就要把这些自动生成的规则放进我们的主Makefile中。我们可以使用Makefile的“include”命令，来引入别的Makefile文件（前面讲过），例如：
   sources = foo.c bar.c
   include $(sources:.c=.d)
上述语句中的“$(sources:.c=.d)”中的“.c=.d”的意思是做一个替换，把变量$(sources)所有[.c]的字串都替换成[.d]，关于这个“替换”的内容，在后面我会有更为详细的讲述。当然，你得注意次序，
因为include是按次来载入文件，最先载入的[.d]文件中的目标会成为默认目标。

## makefile书写命令
### 显示命令
@echo ...：只输出结果，不显示命令
make加参数“-n”或者“--just-pirnt” : 只显示命令，但不会执行命令。这个命令有利于调试makefile，查看命令执行是什么顺序等。
make加参数“-s”或者“--slient”则是全面禁止命令的显示。

### 命令执行
需要注意的是，如果你要让上一条命令的结果应用在下一条命令时，你应该使用分号分隔这两条命令。
例1：
exec:
        cd /home/root
        pwd
例2：
exec:
        cd /home/root;pwd
当我们执行“make exec”时，第一个例子中的cd没有作用，pwd会打印出当前的Makefile目录，而第二个例子中，cd就起作用了，pwd会打印出“/home/root。

### 命令出错
我们可以在Makefile的命令行前加一个减号“-”（在Tab键之后），标记为不管命令出不出错都认为是成功的。如：
  clean:
           -rm -f *.o
还有一个全局的办法是，给make加上“-i”或是“--ignore-errors”参数，那么，Makefile中所有命令都会忽略错误。而如果一个规则是以“.IGNORE”作为目标的，那么这个规则中的所有命令将会忽略错误。
这些是不同级别的防止命令出错的方法，你可以根据你的不同喜欢设置。
还有一个要提一下的make的参数的是“-k”或是“--keep-going”，这个参数的意思是，如果某规则中的命令出错了，那么就终目该规则的执行，但继续执行其它规则。

### 嵌套执行make
总控makefile如下：
subsystem:
           cd subdir && $(MAKE)
其等价于：
    subsystem:
           $(MAKE) -C subdir
总控Makefile的变量可以传递到下级的Makefile中（如果你显示的声明），但是不会覆盖下层的Makefile中所定义的变量，除非指定了“-e”参数。
如果你要传递变量到下级Makefile中，那么你可以使用这样的声明：
export<variable ...>
如果你不想让某些变量传递到下级Makefile中，那么你可以这样声明：
unexport<variable ...>

例子：
export variable =(:=或者+=) value 等价于：
variable =(:=或者+=) value
export variable
如果你要传递所有的变量，那么，只要一个export就行了。后面什么也不用跟，表示传递所有的变量。

需要注意的是，有两个变量，一个是SHELL，一个是MAKEFLAGS，这两个变量不管你是否export，其总是要传递到下层Makefile中，特别是MAKEFILES变量，其中包含了make的参数信息，
如果我们执行“总控Makefile”时有make参数或是在上层Makefile中定义了这个变量，那么MAKEFILES变量将会是这些参数，并会传递到下层Makefile中，这是一个系统级的环境变量。
使用“make -w”来执行，那么当进入该目录时，我们会看到：
      make: Entering directory `/home/root/gnu/make'.
而在完成下层make后离开目录时，我们会看到：   
   make: Leaving directory `/home/root/gnu/make'

当你使用“-C”参数来指定make下层Makefile时，“-w”会被自动打开的。如果参数中有“-s”（“--slient”）或是“--no-print-directory”，那么，“-w”总是失效的。

### 定义命令包
定义这种命令序列的语法以“define”开始，以“endef”结束，如：
define run-yacc
yacc $(firstword $^)
mv y.tab.c $@
endef

 foo.c : foo.y
           $(run-yacc)
在这个命令包的使用中，命令包“run-yacc”中的“$^”就是“foo.y”，“$@”就是“foo.c”


## 使用变量
### 变量的基础
使用变量时，需要给在变量名前加上“$”符号，但最好用小括号“（）”或是大括号“{}”把变量给包括起来。
如果要使用真是的$字符，需要用“$$”来表示。
变量就是一个“替代”的原理。

### 变量中的变量
方式一：使用“=”，在“=”左侧是变量，右侧是变量的值，右侧变量的值可以定义在文件的任何一处，
也就是说，右侧中的变量不一定非要是已定义好的值，其也可以使用后面定义的值。
foo = $(bar)
bar = $(ugh)
ugh = Huh?

all:
echo $(foo)
执行make all将打印Huh?，可见，变量是可以使用后面的变量来定义的。

例子：
A = $(B)
B = $(A)
但是这种方式会让make陷入无限的变量展开过程中去，当然make能检测到这样的定义，并报错。

方式二：
为了避免上面的这种问题，可以使用“:=”操作符，前面的变量不能使用后面的变量，只能使用前面已定义好了的变量。
y := $(x) bar
x := foo
y的值是“bar”，而不是“foo bar”。

例子：
ifeq (0,${MAKELEVEL})
cur-dir := $(shell pwd)
whoami := $(shell whoami)
host-type := $(shell arch)
MAKE := ${MAKE} host-type=${host-type} whoami=${whoami}
endif
对于系统变量“MAKELEVEL”，其意思是，如果我们的make有一个嵌套执行的动作

如果我们要定义一个变量，其值是一个空格，那么我们可以这样来：
nullstring :=
space := $(nullstring) # end of the line
nullstring 是一个Empty变量，其中什么也没有，而我们的space的值是一个空格。因为在操作符的右边是很难描述一个空格的，
这里采用的技术很管用，先用一个 Empty变量来标明变量的值开始了，而后面采用“#”注释符来表示变量定义的终止，这样，
我们可以定义出其值是一个空格的变量。

请注意这里关于“#”的使用，注释符“#”的这种特性值得我们注意，如果我们这样定义一个变量：
dir := /foo/bar # directory to put the frobs in
dir的值是“/foo/bar ”,注意这里有个空格，如果直接使用“$(dir)/file”肯定会错误的。

还有一个比较有用的操作符是“?=”，先看示例：
FOO ?= bar
其含义是，如果FOO没有被定义过，那么变量FOO的值就是“bar”，如果FOO先前被定义过，那么这条语将什么也不做，等价于：
ifeq ($(origin FOO), undefined)
FOO = bar
endif

### 变量高级用法
用法一：变量值的替换，其格式是“$(var:a=b)”或是“${var:a=b}”，
其意思是，把变量“var”中所有以“a”字串“结尾”的“a”替换成“b”字串。这里的“结尾”意思是“空格”或是“结束符”。
foo := a.o b.o c.o
bar := $(foo:.o=.c)
先定义了一个“$(foo)”变量，而第二行的意思是把“$(foo)”中所有以“.o”字串“结尾”全部替换成“.c”，
所以我们的“$(bar)”的值就是“a.c b.c c.c”。

另一种变量替换的技术是以“静态模式”定义，如：
foo := a.o b.o c.o
bar := $(foo:%.o=%.c)
这依赖于被替换字串中的有相同的模式，模式中必须包含一个“%”字符，这个例子同样让$(bar)变量的值为“a.c b.c c.c”。

用法二：把变量的值再当成变量，如：
x = y
y = z
a := $($(x))
在这个例子中，$(x)的值是“y”，所以$($(x))就是$(y)，于是$(a)的值就是“z”。

用例：
first_second = Hello
a = first
b = second
all = $($a_$b)
这里的“$a_$b”组成了“first_second”，于是，$(all)的值就是“Hello”。

用例:
a_objects := a.o b.o c.o
1_objects := 1.o 2.o 3.o
sources := $($(a1)_objects:.o=.c)
如果$(a1)的值是“a”的话，那么，$(sources)的值就是“a.c b.c c.c”；如果$(a1)的值是“1”，
那么$(sources)的值是“1.c 2.c 3.c”。

用例：
dir = foo
$(dir)_sources := $(wildcard $(dir)/*.c)
define $(dir)_print
lpr $($(dir)_sources)
endef
这个例子中定义了三个变量：“dir”，“foo_sources”和“foo_print”。

### 追加变量
操作符“+=”，如果变量之前没有定义过，那么，“+=”会自动变成“=”，如果前面有变量定义，
那么“+=”会继承于前次操作的赋值符。如果前一次的是“:=（=）”，那么“+=”会以“:=（=）”作为其赋值符。

用例：
variable := value
variable += more
等价于：
variable := value
variable := $(variable) more

用例：
objects = main.o foo.o bar.o utils.o
objects += another.o
于是，我们的$(objects)值变成：“main.o foo.o bar.o utils.o another.o”（another.o被追加进去了）

### override指示符
如果有变量是通常make的命令行参数设置的，那么Makefile中对这个变量的赋值会被忽略。
如果你想在Makefile中设置这类参数的值，那么，你可以使用“override”指示符。其语法是：
override <variable> = <value>
override <variable> := <value>
还可以追加：
override <variable> += <more text>

对于多行的变量定义，我们用define指示符，在define指示符前，也同样可以使用ovveride指示符，如：
override define foo
bar
endef

### 多行变量
还有一种设置变量值的方法是使用define关键字。使用define关键字设置变量的值可以有换行，
这有利于定义一系列的命令（前面我们讲过“命令包”的技术就是利用这个关键字）。

define 指示符后面跟的是变量的名字，而重起一行定义变量的值，定义是以endef关键字结束。
其工作方式和“=”操作符一样。变量的值可以包含函数、命令、文字，或是其它变量。因为命令需要以[Tab]键开头，
所以如果你用define定义的命令变量中没有以[Tab]键开头，那么make就不会把其认为是命令。
define two-lines
echo foo
echo $(bar)
endef

### 环境变量
make 运行时的系统环境变量可以在make开始运行时被载入到Makefile文件中，但是如果Makefile中已定义了这个变量，
或是这个变量由make命令行带入，那么系统的环境变量的值将被覆盖。（如果make指定了“-e”参数，那么，系统环境变量
将覆盖Makefile中定义的变量）

因此，如果我们在环境变量中设置了“CFLAGS”环境变量，那么我们就可以在所有的Makefile中使用这个变量了。这对于我们
使用统一的编译参数有比较大的好处。如果Makefile中定义了CFLAGS，那么则会使用Makefile中的这个变量，如果没有定义
则使用系统环境变量的值，一个共性和个性的统一，很像“全局变量”和“局部变量”的特性。     
当make嵌套调用时（参见前面的“嵌套调用”章节），上层Makefile中定义的变量会以系统环境变量的方式传递到下层的Makefile中。
当然，默认情况下，只有通过命令行设置的变量会被传递。而定义在文件中的变量，如果要向下层Makefile传递，则需要使用
exprot关键字来声明。（参见前面章节）

当然，我并不推荐把许多的变量都定义在系统环境中，这样，在我们执行不用的Makefile时，拥有的是同一套系统变量，
这可能会带来更多的麻烦。

### 目标变量
前面我们所讲的在Makefile中定义的变量都是“全局变量”，在整个文件，我们都可以访问这些变量。当然，“自动化变量”除外，
如“$<”等这种类量的自动化变量就属于“规则型变量”，这种变量的值依赖于规则的目标和依赖目标的定义。

同样也可以为某个目标设置局部变量，这种变量被称为“Target-specific Variable”，它可以和“全局变量”同名，
因为它的作用范围只在这条规则以及连带规则中，所以其值也只在作用范围内有效。而不会影响规则链以外的全局变量的值。
其语法是：
<target ...> : <variable-assignment>
<target ...> : overide <variable-assignment>
<variable-assignment>可以是前面讲过的各种赋值表达式，如“=”、“:=”、“+=”或是“？=”。
第二个语法是针对于make命令行带入的变量，或是系统环境变量。

prog : CFLAGS = -g
prog : prog.o foo.o bar.o
        $(CC) $(CFLAGS) prog.o foo.o bar.o

prog.o : prog.c
        $(CC) $(CFLAGS) prog.c

foo.o : foo.c
        $(CC) $(CFLAGS) foo.c

bar.o : bar.c
        $(CC) $(CFLAGS) bar.c
 在这个示例中，不管全局的$(CFLAGS)的值是什么，在prog目标，以及其所引发的所有规则中（prog.o foo.o bar.o的规则），
 $(CFLAGS)的值都是“-g”。

 ### 模式变量
 在GNU的make中，还支持模式变量（Pattern-specific Variable），通过上面的目标变量中，我们知道，变量可以定义在某个目标上。
 模式变量的好处就是，我们可以给定一种“模式”，可以把变量定义在符合这种模式的所有目标上。
 make的“模式”一般是至少含有一个“%”的，所以，我们可以以如下方式给所有以[.o]结尾的目标定义目标变量：
 %.o : CFLAGS = -O

 同样，模式变量的语法和“目标变量”一样：

<pattern ...> : <variable-assignment>
<pattern ...> : override <variable-assignment>
override同样是针对于系统环境传入的变量，或是make命令行指定的变量。

### 条件表达式语法：
<conditional-directive>
<text-if-true>
endif

<conditional-directive>
<text-if-true>
else
<text-if-false>
endif

其中<conditional-directive>表示条件关键字，如“ifeq”。这个关键字有四个。

第一个关键字“ifeq”
ifeq (<arg1>, <arg2> )
ifeq '<arg1>' '<arg2>'
ifeq "<arg1>" "<arg2>"
ifeq "<arg1>" '<arg2>'
ifeq '<arg1>' "<arg2>"
比较参数“arg1”和“arg2”的值是否相同。当然，参数中我们还可以使用make的函数。如：
ifeq ($(strip $(foo)),)
<text-if-empty>
endif

第二个关键字“ifneq”
ifneq (<arg1>, <arg2> )
ifneq '<arg1>' '<arg2>'
ifneq "<arg1>" "<arg2>"
ifneq "<arg1>" '<arg2>'
ifneq '<arg1>' "<arg2>"
其比较参数“arg1”和“arg2”的值是否相同，如果不同，则为真。和“ifeq”类似。

第三个条件关键字是“ifdef”。语法是：
ifdef <variable-name>
如果变量<variable-name>的值非空，那到表达式为真。否则，表达式为假。
当然，<variable-name>同样可以是一个函数的返回值。注意，ifdef只是测试一个变量是否有值，
其并不会把变量扩展到当前位置。还是来看两个例子：
例1：
bar =
foo = $(bar)
ifdef foo
frobozz = yes
else
frobozz = no
endif
例2：
foo =
ifdef foo
frobozz = yes
else
frobozz = no
endif
第一个例子中，“$(frobozz)”值是“yes”，第二个则是“no”。

第四个条件关键字是“ifndef”。其语法是：
ifndef <variable-name>
这个跟“ifdef”是相反的意思。

在<conditional-directive>这一行上，多余的空格是被允许的，但是不能以[Tab]键做为开始（不然就被认为是命令）。
而注释符“#”同样也是安全的。“else”和“endif”也一样，只要不是以[Tab]键开始就行了。

特别注意的是，make是在读取Makefile时就计算条件表达式的值，并根据条件表达式的值来选择语句，
所以，最好不要把自动化变量（如“$@”等）放入条件表达式中，因为自动化变量是在运行时才有的。

## 使用函数
### 函数的调用语法
函数调用，很像变量的使用，也是以“$”来标识的，其语法如下：
$(<function> <arguments>)
或是
${<function> <arguments>}
<function>就是函数名，make支持的函数不多。
<arguments>是函数的参数，参数间以逗号“,”分隔，而函数名和参数之间以“空格”分隔。
函数调用以“$”开头，以圆括号或花括号把函数名和参数括起。
示例：
comma:= ,
empty:=
space:= $(empty) $(empty)
foo:= a b c
bar:= $(subst $(space),$(comma),$(foo))
$(foo)中的空格使用逗号替换，$(bar)值是a,b,c

### 字符串处理函数

1. $(subst <from>,<to>,<text>)
名称：字符串替换函数——subst。
功能：把字串<text>中的<from>字符串替换成<to>。
返回：函数返回被替换过后的字符串。

2. $(patsubst <pattern>,<replacement>,<text>)
名称：模式字符串替换函数——patsubst。
功能：查找<text>中的单词（单词以“空格”、“Tab”或“回车”“换行”分隔）是否符合模式<pattern>，
    如果匹配的话，则以<replacement>替换。这里，<pattern>可以包括通配符“%”，表示任意长度的字串。
    如果<replacement>中也包含“%”，那么，<replacement>中的这个“%”将是<pattern>中的那个“%”所代表的字串。
    （可以用“\”来转义，以“\%”来表示真实含义的“%”字符）
返回：函数返回被替换过后的字符串。
示例：
$(patsubst %.c,%.o,x.c.c bar.c)
把字串“x.c.c bar.c”符合模式[%.c]的单词替换成[%.o]，返回结果是“x.c.o bar.o”

这和我们前面“变量章节”说过的相关知识有点相似。如：
“$(var:<pattern>=<replacement> )”
相当于
“$(patsubst <pattern>,<replacement>,$(var))”，

而“$(var: <suffix>=<replacement> )”
则相当于
“$(patsubst %<suffix>,%<replacement>,$(var))”。

例如有：objects = foo.o bar.o baz.o，
那么，“$(objects:.o=.c)”和“$(patsubst %.o,%.c,$(objects))”是一样的。

3. $(strip <string>)
名称：去空格函数——strip。
功能：去掉<string>字串中开头和结尾的空字符。
返回：返回被去掉空格的字符串值。
$(strip a b c )
把字串“a b c ”去到开头和结尾的空格，结果是“a b c”。

4. $(findstring <find>,<in>)
名称：查找字符串函数——findstring。
功能：在字串<in>中查找<find>字串。
返回：如果找到，那么返回<find>，否则返回空字符串。
$(findstring a,a b c)
$(findstring a,b c)
第一个函数返回“a”字符串，第二个返回“”字符串（空字符串）

5. $(filter <pattern...>,<text>)
名称：过滤函数——filter。
功能：以<pattern>模式过滤<text>字符串中的单词，保留符合模式<pattern>的单词。可以有多个模式。
返回：返回符合模式<pattern>的字串。
sources := foo.c bar.c baz.s ugh.h
foo: $(sources)
        cc $(filter %.c %.s,$(sources)) -o foo
$(filter %.c %.s,$(sources))返回的值是“foo.c bar.c baz.s”。

6. $(filter-out <pattern...>,<text>)
名称：反过滤函数——filter-out。
功能：以<pattern>模式过滤<text>字符串中的单词，去除符合模式<pattern>的单词。可以有多个模式。
返回：返回不符合模式<pattern>的字串。
objects=main1.o foo.o main2.o bar.o
mains=main1.o main2.o
$(filter-out $(mains),$(objects)) 返回值是“foo.o bar.o”。


7. $(sort <list>)
名称：排序函数——sort。
功能：给字符串<list>中的单词排序（升序）。
返回：返回排序后的字符串。
示例：$(sort foo bar lose)返回“bar foo lose” 。
备注：sort函数会去掉<list>中相同的单词。

8. $(word <n>,<text>)
名称：取单词函数——word。
功能：取字符串<text>中第<n>个单词。（从一开始）
返回：返回字符串<text>中第<n>个单词。如果<n>比<text>中的单词数要大，那么返回空字符串。
示例：$(word 2, foo bar baz)返回值是“bar”。

9. $(wordlist <s>,<e>,<text>)
名称：取单词串函数——wordlist。
功能：从字符串<text>中取从<s>开始到<e>的单词串。<s>和<e>是一个数字。
返回：返回字符串<text>中从<s>到<e>的单词字串。如果<s>比<text>中的单词数要大，那么返回空字符串。
    如果<e>大于<text>的单词数，那么返回从<s>开始，到<text>结束的单词串。
示例： $(wordlist 2, 3, foo bar baz)返回值是“bar baz”。


10. $(words <text>)
名称：单词个数统计函数——words。
功能：统计<text>中字符串中的单词个数。
返回：返回<text>中的单词数。
示例：$(words, foo bar baz)返回值是“3”。
备注：如果我们要取<text>中最后的一个单词，我们可以这样：$(word $(words <text>),<text>)。

11. $(firstword <text>)
名称：首单词函数——firstword。
功能：取字符串<text>中的第一个单词。
返回：返回字符串<text>的第一个单词。
示例：$(firstword foo bar)返回值是“foo”。
备注：这个函数可以用word函数来实现：$(word 1,<text>)。

以上，是所有的字符串操作函数，如果搭配混合使用，可以完成比较复杂的功能。如：
override CFLAGS += $(patsubst %,-I%,$(subst :, ,$(VPATH)))
如果我们的“$(VPATH)”值是“src:../headers”，那么“$(patsubst %,-I%,$(subst :, ,$(VPATH)))”
将返回“-Isrc -I../headers”，这正是cc或gcc搜索头文件路径的参数。


### 文件名操作函数

1. $(dir <names...>)
名称：取目录函数——dir。
功能：从文件名序列<names>中取出目录部分。目录部分是指最后一个反斜杠（“/”）之前的部分。如果没有反斜杠，那么返回“./”。
返回：返回文件名序列<names>的目录部分。
示例： $(dir src/foo.c hacks)返回值是“src/ ./”。


2. $(notdir <names...>)
名称：取文件函数——notdir。
功能：从文件名序列<names>中取出非目录部分。非目录部分是指最后一个反斜杠（“/”）之后的部分。
返回：返回文件名序列<names>的非目录部分。
示例： $(notdir src/foo.c hacks)返回值是“foo.c hacks”。

3. $(suffix <names...>)
名称：取后缀函数——suffix。
功能：从文件名序列<names>中取出各个文件名的后缀。
返回：返回文件名序列<names>的后缀序列，如果文件没有后缀，则返回空字串。
示例：$(suffix src/foo.c src-1.0/bar.c hacks)返回值是“.c .c”。

4. $(basename <names...>)
名称：取前缀函数——basename。
功能：从文件名序列<names>中取出各个文件名的前缀部分。
返回：返回文件名序列<names>的前缀序列，如果文件没有前缀，则返回空字串。
示例：$(basename src/foo.c src-1.0/bar.c hacks)返回值是“src/foo src-1.0/bar hacks”。


5. $(addsuffix <suffix>,<names...>)
名称：加后缀函数——addsuffix。
功能：把后缀<suffix>加到<names>中的每个单词后面。
返回：返回加过后缀的文件名序列。
示例：$(addsuffix .c,foo bar)返回值是“foo.c bar.c”。


6. $(addprefix <prefix>,<names...>)
名称：加前缀函数——addprefix。
功能：把前缀<prefix>加到<names>中的每个单词后面。
返回：返回加过前缀的文件名序列。
示例：$(addprefix src/,foo bar)返回值是“src/foo src/bar”。


7. $(join <list1>,<list2>)
名称：连接函数——join。
功能：把<list2>中的单词对应地加到<list1>的单词后面。如果<list1>的单词个数要比<list2>的多，
    那么，<list1>中的多出来的单词将保持原样。如果<list2>的单词个数要比<list1>多，那么，
    <list2>多出来的单词将被复制到<list2>中。
返回：返回连接过后的字符串。
示例：$(join aaa bbb , 111 222 333)返回值是“aaa111 bbb222 333”。


### 其他功能函数

1. foreach 函数 $(foreach <var>,<list>,<text>)
这个函数的意思是，把参数<list>中的单词逐一取出放到参数<var>所指定的变量中，然后再执行<text>所包含的表达式。
每一次<text>会返回一个字符串，循环过程中，<text>的所返回的每个字符串会以空格分隔，最后当整个循环结束时，
<text>所返回的每个字符串所组成的整个字符串（以空格分隔）将会是foreach函数的返回值。

<var>最好是一个变量名，<list>可以是一个表达式，而<text>中一般会使用<var>这个参数来依次枚举<list>中的单词。举个例子：
names := a b c d
files := $(foreach n,$(names),$(n).o)
上面的例子中，$(name)中的单词会被挨个取出，并存到变量“n”中，“$(n).o”每次根据“$(n)”计算出一个值，这些值以空格分隔，
最后作为foreach函数的返回，所以，$(files)的值是“a.o b.o c.o d.o”。

注意，foreach中的<var>参数是一个临时的局部变量，foreach函数执行完后，参数<var>的变量将不在作用，
其作用域只在foreach函数当中。


2. if 函数
$(if <condition>,<then-part>)
或是
$(if <condition>,<then-part>,<else-part>)
可见，if函数可以包含“else”部分，或是不含。即if函数的参数可以是两个，也可以是三个。
<condition>参数是if的表达式，如果其返回的为非空字符串，那么这个表达式就相当于返回真，
于是，<then-part>会被计算，否则<else-part> 会被计算。

而if函数的返回值是，如果<condition>为真（非空字符串），那个<then- part>会是整个函数的返回值，
如果<condition>为假（空字符串），那么<else-part>会是整个函数的返回值，此时如果<else-part>没有被定义，
那么，整个函数返回空字串。

所以，<then-part>和<else-part>只会有一个被计算。


3. call 函数
